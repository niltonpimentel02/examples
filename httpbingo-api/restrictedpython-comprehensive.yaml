- name: comprehensive_restrictedpython_allowed_modules
  path: /anything/allowed-modules
  method: post
  body:
    test_category: "allowed_modules_comprehensive"
    # Test all ALLOWED_MODULES extensively
    datetime_operations:
      now_iso: ${{ datetime.datetime.now().isoformat() }}
      future_date: ${{ (datetime.datetime.now() + datetime.timedelta(days=7)).strftime('%Y-%m-%d') }}
      timestamp: ${{ datetime.datetime.now().timestamp() }}
    math_operations:
      sqrt_result: ${{ math.sqrt(144) }}
      pi_constant: ${{ math.pi }}
      ceiling: ${{ math.ceil(4.1) }}
      floor: ${{ math.floor(4.9) }}
      power: ${{ math.pow(3, 3) }}
      logarithm: ${{ math.log10(1000) }}
      trigonometry: ${{ math.cos(0) }}
    random_operations:
      random_int: ${{ random.randint(100, 200) }}
      random_choice: ${{ random.choice(["a", "b", "c"]) }}
    regex_operations:
      match_result: ${{ bool(re.match(r"^\d+", "123abc")) }}
      search_result: ${{ bool(re.search(r"test", "this is a test string")) }}
      findall_result: ${{ re.findall(r"\d+", "abc123def456") }}
    time_operations:
      current_time: ${{ time.time() }}
      formatted_time: ${{ time.strftime('%Y-%m-%d', time.localtime()) }}
    uuid_operations:
      uuid4_str: ${{ str(uuid.uuid4()) }}
      uuid_parts: ${{ str(uuid.uuid4()).split("-") }}
  tests:
    - name: status_code_is_200
      assert: ${{ response.status_code == 200 }}
    - name: datetime_works
      assert: ${{ len(response.json()["json"]["datetime_operations"]["now_iso"]) > 15 }}
    - name: math_sqrt_correct
      assert: ${{ response.json()["json"]["math_operations"]["sqrt_result"] == 12.0 }}
    - name: math_constants_work
      assert: ${{ response.json()["json"]["math_operations"]["pi_constant"] > 3.14 }}
    - name: random_in_range
      assert: ${{ 100 <= response.json()["json"]["random_operations"]["random_int"] <= 200 }}
    - name: regex_works
      assert: ${{ response.json()["json"]["regex_operations"]["match_result"] == True }}
    - name: time_is_numeric
      assert: ${{ isinstance(response.json()["json"]["time_operations"]["current_time"], (int, float)) }}
    - name: uuid_is_valid_format
      assert: ${{ len(response.json()["json"]["uuid_operations"]["uuid_parts"]) == 5 }}

- name: comprehensive_unicode_and_edge_cases
  path: /anything/unicode-edge-cases
  method: post
  body:
    test_category: "unicode_and_edge_cases"
    unicode_tests:
      reversed_spanish: ${{ "español"[::-1] }}
      unicode_length: ${{ len("测试") }}
      accent_handling: ${{ "café".upper() }}
      emoji_length: ${{ len("👋🌍") }}
      mixed_unicode: ${{ "Hello 世界 🌍".replace("世界", "World") }}
    edge_cases:
      empty_operations:
        empty_string: ${{ len("") }}
        empty_list: ${{ len([]) }}
        empty_dict: ${{ len({}) }}
      zero_operations:
        zero_math: ${{ math.sqrt(0) }}
        zero_power: ${{ math.pow(0, 2) }}
      negative_operations:
        abs_negative: ${{ abs(-100) }}
        negative_modulo: ${{ -7 % 3 }}
      boolean_logic:
        complex_logic: ${{ (True and False) or (not False and True) }}
        truthiness: ${{ bool([1, 2, 3]) and bool("") }}
        comparison_chain: ${{ 1 < 2 < 3 < 4 }}
  tests:
    - name: status_code_is_200
      assert: ${{ response.status_code == 200 }}
    - name: spanish_reversed
      assert: ${{ response.json()["json"]["unicode_tests"]["reversed_spanish"] == "loñapse" }}
    - name: chinese_length
      assert: ${{ response.json()["json"]["unicode_tests"]["unicode_length"] == 2 }}
    - name: accent_upper
      assert: ${{ response.json()["json"]["unicode_tests"]["accent_handling"] == "CAFÉ" }}
    - name: empty_string_len_zero
      assert: ${{ response.json()["json"]["edge_cases"]["empty_operations"]["empty_string"] == 0 }}
    - name: zero_sqrt_works
      assert: ${{ response.json()["json"]["edge_cases"]["zero_operations"]["zero_math"] == 0.0 }}
    - name: abs_works
      assert: ${{ response.json()["json"]["edge_cases"]["negative_operations"]["abs_negative"] == 100 }}
    - name: boolean_logic_works
      assert: ${{ response.json()["json"]["edge_cases"]["boolean_logic"]["complex_logic"] == True }}

- name: comprehensive_isolation_test_sequence
  path: /anything/isolation-test-1
  method: post
  vars:
    test_value_1: ${{ 42 }}
    string_result_1: ${{ "first_test" }}
    list_result_1: ${{ [1, 2, 3] }}
  body:
    test_category: "isolation_sequence_1"
    sequence_number: 1
    test_data:
      computed_value: ${{ 10 + 32 }}
      string_op: ${{ "isolation".upper() }}
      list_len: ${{ len([1, 2, 3, 4, 5]) }}
  tests:
    - name: status_code_is_200
      assert: ${{ response.status_code == 200 }}
    - name: first_computation_correct
      assert: ${{ response.json()["json"]["test_data"]["computed_value"] == 42 }}

- name: comprehensive_isolation_test_sequence_2
  path: /anything/isolation-test-2  
  method: post
  body:
    test_category: "isolation_sequence_2"
    sequence_number: 2
    test_data:
      # These should NOT have access to previous test variables
      different_computation: ${{ 20 + 64 }}
      different_string: ${{ "different".lower() }}
      different_list: ${{ len([10, 20]) }}
      # Verify independence
      same_operation_different_result: ${{ "isolation".lower() }}
  tests:
    - name: status_code_is_200
      assert: ${{ response.status_code == 200 }}
    - name: second_computation_different
      assert: ${{ response.json()["json"]["test_data"]["different_computation"] == 84 }}
    - name: isolation_verified
      assert: ${{ response.json()["json"]["test_data"]["same_operation_different_result"] == "isolation" }}
    - name: no_state_leak
      # This test verifies that the computations are independent
      assert: ${{ response.json()["json"]["test_data"]["different_computation"] != test_value_1 }}

- name: security_documentation_comprehensive
  path: /anything/security-documentation
  method: post
  body:
    test_category: "security_documentation_comprehensive"
    documentation:
      blocked_modules: "os, sys, subprocess, socket, urllib, http"
      blocked_builtins: "open, exec, eval, compile, __import__"
      blocked_attributes: "__class__, __bases__, __subclasses__, __globals__"
      blocked_side_effects: "globals(), locals(), setattr(), delattr()"
    expected_behavior: "All dangerous operations should raise InvalidPythonCodeError"
    security_note: "RestrictedPython prevents code injection and system access"
    # Safe operations that should continue working
    safe_verification:
      math_still_works: ${{ math.sqrt(49) }}
      datetime_still_works: ${{ datetime.datetime.now().year }}
      string_still_works: ${{ "SAFE".lower() }}
      list_still_works: ${{ [1, 2, 3][-1] }}
  tests:
    - name: status_code_is_200
      assert: ${{ response.status_code == 200 }}
    - name: safe_math_verified
      assert: ${{ response.json()["json"]["safe_verification"]["math_still_works"] == 7.0 }}
    - name: safe_datetime_verified
      assert: ${{ response.json()["json"]["safe_verification"]["datetime_still_works"] >= 2024 }}
    - name: safe_string_verified
      assert: ${{ response.json()["json"]["safe_verification"]["string_still_works"] == "safe" }}
    - name: safe_list_verified
      assert: ${{ response.json()["json"]["safe_verification"]["list_still_works"] == 3 }}