name: restrictedpython_unsafe_operations
path: snippets/
headers:
  Authorization: Token ${token}
requests:
  # Test: Verify that unsafe operations documentation exists
  # These tests document what SHOULD be blocked by RestrictedPython
  # The expressions themselves are commented to avoid execution

  - name: test_disallowed_modules_documentation
    method: post
    body:
      title: "Disallowed Modules Documentation"
      code: "# These modules should be blocked by RestrictedPython"
      language: "python"
      # Document what should be blocked (as comments for safety):
      # BLOCKED: import os; os.system("ls")
      # BLOCKED: import sys; sys.exit(0)  
      # BLOCKED: import subprocess; subprocess.run(["ls"])
      # BLOCKED: __import__('os').system('ls')
      security_test_category: "disallowed_modules"
      expected_behavior: "RestrictedPython should prevent importing os, sys, subprocess"
    tests:
      - name: status_code_is_201
        assert: ${{ response.status_code == 201 }}
      - name: documentation_created
        assert: ${{ response.json()["security_test_category"] == "disallowed_modules" }}

  - name: test_dangerous_builtins_documentation  
    method: post
    body:
      title: "Dangerous Built-ins Documentation"
      code: "# These built-ins should be blocked"
      language: "python"
      # Document what should be blocked (as comments for safety):
      # BLOCKED: open("file.txt", "r")
      # BLOCKED: exec("print('dangerous')")
      # BLOCKED: eval("2+2") 
      # BLOCKED: compile("print(1)", "<string>", "exec")
      security_test_category: "dangerous_builtins"
      expected_behavior: "RestrictedPython should block open, exec, eval, compile"
    tests:
      - name: status_code_is_201
        assert: ${{ response.status_code == 201 }}
      - name: documentation_created
        assert: ${{ response.json()["security_test_category"] == "dangerous_builtins" }}

  - name: test_restricted_attributes_documentation
    method: post
    body:
      title: "Restricted Attributes Documentation"
      code: "# These attribute accesses should be blocked"
      language: "python"
      # Document what should be blocked (as comments for safety):
      # BLOCKED: ().__class__.__mro__
      # BLOCKED: [].__class__.__base__.__subclasses__()
      # BLOCKED: "".__class__.__mro__[1].__subclasses__()
      # BLOCKED: (lambda:0).__globals__
      # BLOCKED: type.__subclasses__(type)
      security_test_category: "restricted_attributes" 
      expected_behavior: "RestrictedPython should block dangerous attribute access"
    tests:
      - name: status_code_is_201
        assert: ${{ response.status_code == 201 }}
      - name: documentation_created
        assert: ${{ response.json()["security_test_category"] == "restricted_attributes" }}

  - name: test_side_effects_prevention_documentation
    method: post
    body:
      title: "Side Effects Prevention Documentation"
      code: "# These side effects should be prevented"
      language: "python"
      # Document what should be blocked (as comments for safety):
      # BLOCKED: globals()["x"] = 1
      # BLOCKED: setattr(object(), "attr", "value")  
      # BLOCKED: delattr(object(), "attr")
      # BLOCKED: vars()["new_var"] = "dangerous"
      security_test_category: "side_effects_prevention"
      expected_behavior: "RestrictedPython should prevent global state mutation"
    tests:
      - name: status_code_is_201
        assert: ${{ response.status_code == 201 }}
      - name: documentation_created
        assert: ${{ response.json()["security_test_category"] == "side_effects_prevention" }}

  # Test that safe operations still work after unsafe documentation
  - name: test_safe_operations_still_work
    method: post
    body:
      title: "Safe Operations Verification"
      code: "# Verify safe operations work"
      language: "python" 
      # These should continue to work fine
      safe_math: ${{ math.sqrt(25) }}
      safe_datetime: ${{ datetime.datetime.now().year }}
      safe_string: ${{ "test".upper() }}
      safe_list: ${{ [1, 2, 3][1] }}
      safe_dict: ${{ {"key": "value"}["key"] }}
    tests:
      - name: status_code_is_201
        assert: ${{ response.status_code == 201 }}
      - name: safe_math_works
        assert: ${{ response.json()["safe_math"] == 5.0 }}
      - name: safe_datetime_works  
        assert: ${{ response.json()["safe_datetime"] >= 2024 }}
      - name: safe_string_works
        assert: ${{ response.json()["safe_string"] == "TEST" }}
      - name: safe_list_works
        assert: ${{ response.json()["safe_list"] == 2 }}
      - name: safe_dict_works
        assert: ${{ response.json()["safe_dict"] == "value" }}